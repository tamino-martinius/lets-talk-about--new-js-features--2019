doctype html
html
  head
      title Lets talk about ... Whats new and upcoming in JavaScript (2019)
      meta(charset='utf-8')
      script
        | window.PERMANENT_URL_PREFIX = window.PERMANENT_URL_PREFIX || 'node_modules/lets-talk-about--template/assets/vendor/';
      script(src='node_modules/lets-talk-about--template/assets/vendor/slides.js')
      link(href='styles.css'  rel='stylesheet' type='text/css')
  body
    section.slides.layout-regular.template-default
      article.build
        h2 Lets Talk about ...
        h2 Whats new (and upcoming) in JS
        h2 2019 Edition
      article.section
        h1 Upcoming
      article
        h1 Stages
        ul.build
          li Stage 0: Strawperson (Playground/PoC)
          li Stage 1: Proposal (Polyfill)
          li Stage 2: Draft (Experimental)
          li Stage 3: Candidate (Spec compliant)
          li Stage 4: Finished (Shipping)
      article.section
        h2 Stage 0 (Strawperson)
      article
        h1 Nested Import
      article.build
        h2 Currently
        pre
          | import { strictEqual } from 'assert';
          | import { check as checkC } from './client.js';
          | import { check as checkS } from './server.js';
          |
          | describe('fancy feature #5', () => {
          |   it('should work on the client', () => {
          |     strictEqual(checkC(), 'client ok');
          |   });
          |
          |   it('should work on the server', () => {
          |     strictEqual(checkS(), 'server ok');
          |   });
          | });
      article.build
        h2 With nested imports
        pre
          | describe('fancy feature #5', () => {
          |   import { strictEqual } from 'assert';
          |
          |   it('should work on the client', () => {
          |     import { check } from './client.js';
          |     strictEqual(check(), 'client ok');
          |   });
          |
          |   it('should work on the server', () => {
          |     import { check } from './server.js';
          |     strictEqual(check(), 'server ok');
          |   });
          | });
      article
        h2 Advantages
        ul.build
          li Lazy evaluation
          li Scoped to enclosing block
          li Backwards compatible
      article.section
        h2 Stage 1 (Proposal)
      article.build
        h1 Math
        h2 Extensions
      article.build
        h2 Seeded (Pseudo) Random Numbers
        h3 Generates an enumerable based on the passed seed
        pre
          | for (const [i,r] of enumerate(
          |   Math.seededPRNG({seed:0})
          | )) {
          |   // do something with each value
          |   if(i >= limit) break;
          | }
      article.build
        h2 Clamp
        h3 Makes sure value stays in given range
        pre
          | Math.clamp(x, lower, upper);
        pre
          | Math.clamp(-10, 0, 100); // => 0
        pre
          | Math.clamp(1000, 0, 100); // => 100
        pre
          | Math.clamp(0, 10, 100); // => 10
      article.build
        h2 Scale
        h3 Maps value from input range to output range
        pre
          | Math.scale(x, inLow, inHigh, outLow, outHigh);
        pre
          | Math.scale(0.25, 0, 1, 0, 100); // => 25
        pre
          | Math.scale(0.25, 0, 1, -180, 180); // => -90
      article.build
        h1 Iterator
        h2 Extensions
      article.build
        h2 Sample Iterator
        pre
          | function* naturals() {
          |   let i = 0;
          |   while (true) {
          |     yield i;
          |     i += 1;
          |   }
          | }
        pre
          | for (const i of naturals) {
          |   // do something with each value
          |   if(i >= limit) break;
          | }
      article.build
        h2 Filter
        h3 Returns iterator which skips some values of source iterator
        pre
          | const evens = naturals()
          |   .filter((n) => n % 2 === 0);
        pre
          | for (const i of evens) {
          |   // do something with each value
          |   if(i >= limit) break;
          | }
      article
        h2 Other extensions
        ul.build
          li map
          li count
          li min / max
          li find
          li skip / take
      article
        h1 Observer
        //- ! TODO !
      article.build
        h1 Promise
        h2 Extensions
      article.build
        h1 try / attempt
        h2 Converts function to promise
        h2 and sync errors to async
      article.build
        h2 current
        pre
          | promise = new Promise((resolve, reject) => {
          |   throw new Error('i failed');
          | });
          | promise.catch(console.log); // => i failed
      article.build
        h2 Promise.try
        pre
          | promise = Promise.try(() => {
          |   throw new Error('i failed');
          | });
          | promise.catch(console.log); // => i failed
        pre
          | promise = Promise.try(() => {
          |   return 'result';
          | });
          | promise.then(console.log); // => result
      article
        h2 Promise.all
        h3 (ES 2015)
        ul.build
          li returns all results as array
          li short-circuits on reject
      article
        h2 Promise.race
        h3 (ES 2015)
        ul.build
          li resolves first settled promise
          li rejects if first settled promise rejects
      article
        h2 Promise.any
        ul.build
          li rejects when no promise resolves
          li short-circuits on resolve
      article
        h2 Promise.allSettled
        ul.build
          li returns all results as array
          li does not short circuit
      article.section
        h2 Stage 2 (Draft)
      article
        h1 Decorators
      article
        h1 Temporal
        h2 MomentJS
        //- ! TODO !
      article.build
        h1 (Weak)Set
        h2 Extensions
      article
        h2 Array-like
        ul.build
          li filter
          li map
          li find
          li reduce
          li join
          li ...
      article
        h2 Manipulating
        ul.build
          li addAll(... elements)
          li deleteAll(... elements)
          li intersection
          li union
          li difference
          li ...
      article
        h2 Comparing
        ul.build
          li isSubsetOf
          li isDisjointFrom
          li isSupersetOf
      article.build
        h1 (Weak)Map
        h2 Extensions
      article
        h2 Array-like
        ul.build
          li of / from
          li filter
          li mapKeys / mapValues
          li reduce
          li join
          li ...
      article
        h2 Manipulating
        ul.build
          li deleteAll
          li merge
          li update
      article
        h2 Aggregation
        ul.build
          li groupBy
          li keyBy
      article.image(data-src="node_modules/lets-talk-about--template/assets/memes/all-the-things.jpg")
        h1 &nbsp;
        h1 Thats it
      article
        h2 Whats next?
        ul.build
          li
            a(href="https://github.com/lukehoban/es6features/")
              | List of new js features
          li
            a(href="https://babeljs.io/repl/")
              | Babel Playground
          li
            a(href="https://www.typescriptlang.org/play/")
              | TypeScript Playground
          li
            a(href="https://codepen.io/")
              | CodePen

      article.section
        h1 Questions?

    script(src='node_modules/lets-talk-about--template/assets/scripts/main.js')
