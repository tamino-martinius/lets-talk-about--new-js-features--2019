doctype html
html
  head
      title Lets talk about ... Whats new and upcoming in JavaScript (2019)
      meta(charset='utf-8')
      link(href='styles.styl'  rel='stylesheet' type='text/css')
      doctype html
  body
    section.slides.layout-regular.template-default
      article.build
        h2 Lets Talk about ...
        h2 Whats new (and upcoming) in JS
        h2 2019 Edition
      article
        h1 Stages
        ul.build
          li Stage 0: Strawperson (Nothing/PoC)
          li Stage 1: Proposal (Polyfill)
          li Stage 2: Draft (Experimental)
          li Stage 3: Candidate (Spec compliant)
          li Stage 4: Finished (Shipping)
      article.section
        h2 Stage 0 (Strawperson)
      article
        h1 Nested Import
      article.build
        h2 Currently
        pre(style='line-height: 3vw')
          | import { strictEqual } from 'assert';
          | import { check as checkC } from './client.js';
          | import { check as checkS } from './server.js';
        pre(style='line-height: 3vw')
          | describe('fancy feature #5', () => {
          |   it('should work on the client', () => {
          |     strictEqual(checkC(), 'client ok');
          |   });
          |
          |   it('should work on the server', () => {
          |     strictEqual(checkS(), 'server ok');
          |   });
          | });
      article.build
        h2 With nested imports
        pre(style='line-height: 3vw')
          | describe('fancy feature #5', () => {
          |   import { strictEqual } from 'assert';
          |
          |   it('should work on the client', () => {
          |     import { check } from './client.js';
          |     strictEqual(check(), 'client ok');
          |   });
          |
          |   it('should work on the server', () => {
          |     import { check } from './server.js';
          |     strictEqual(check(), 'server ok');
          |   });
          | });
      article
        h2 Advantages
        ul.build
          li Lazy evaluation
          li Scoped to enclosing block
          li Backwards compatible
      article.section
        h2 Stage 1 (Proposal)
      article.build
        h1 Math
        h2 Extensions
      article.build
        h2 Seeded (Pseudo) Random Numbers
        h3 Generates an enumerable based on the passed seed
        pre
          | for (const [i,r] of enumerate(
          |   Math.seededPRNG({seed:0})
          | )) {
          |   // do something with each value
          |   if(i >= limit) break;
          | }
      article.build
        h2 Clamp
        h3 Makes sure value stays in given range
        pre
          | Math.clamp(x, lower, upper);
        pre
          | Math.clamp(-10, 0, 100);  // → 0
        pre
          | Math.clamp(1000, 0, 100); // → 100
        pre
          | Math.clamp(0, 10, 100);   // → 10
      article.build
        h2 Scale
        h3 Maps value from input range to output range
        pre
          | Math.scale(x, inLow, inHigh, outLow, outHigh);
        pre
          | Math.scale(0.25, 0, 1, 0, 100);    // → 25
        pre
          | Math.scale(0.25, 0, 1, -180, 180); // → -90
      article.build
        h1 Iterator
        h2 Extensions
      article.build
        h2 Sample Iterator
        pre
          | function* naturals() {
          |   let i = 0;
          |   while (true) {
          |     yield i;
          |     i += 1;
          |   }
          | }
        pre
          | for (const i of naturals) {
          |   // do something with each value
          |   if(i >= limit) break;
          | }
      article.build
        h2 Filter
        h3 Returns iterator which skips some values of source iterator
        pre
          | const evens = naturals()
          |   .filter((n) => n % 2 === 0);
        pre
          | for (const i of evens) {
          |   // do something with each value
          |   if(i >= limit) break;
          | }
      article
        h2 Other extensions
        ul.build
          li map
          li count
          li min / max
          li find
          li skip / take
      article.build
        h1 Observable
        h2 Mix of Promise and Iterator
      article.build
        h2 Create Observable
        pre
          | let observable = new Observable(observer => {
          |   const {next, error, complete } = observer;
          |   // Emit a single value after 1 second
          |   let timer = setTimeout(() => {
          |     next('hello');
          |     complete();
          |   }, 1000);
          |
          |   // Return cleanup function
          |   return () => clearTimeout(timer);
          | });
      article.build
        h2 Observable.prototype.subscribe
        pre
          | let subscription = observable.subscribe(
          |   x => console.log(x),
          |   err => console.log(`Failed: ${err}`),
          |   () => console.log('Finished')
          | );
      article.build
        h2 Observable.prototype.forEach
        pre
          | observable.forEach(x => {
          |   console.log(`Received value: ${ x }`);
          | }).then(() => {
          |   console.log('Finished successfully')
          | }).catch(err => {
          |   console.log(`Finished with error: ${ err }`);
          | })
      article.build
        h2 Observable.prototype.filter
        pre
          | observable.filter(callback)
          | Observable.of(1, 2, 3).filter(value => {
          |   return value > 2;
          | }).subscribe(value => {
          |   console.log(value);
          | });
        pre
          | // → 3
      article.build
        h2 Observable.prototype.map
        pre
          | Observable.of(1, 2, 3).map(value => {
          |   return value * 2;
          | }).subscribe(value => {
          |   console.log(value);
          | });
        pre
          | // → 2 → 4 → 6
      article.build
        h2 Observable.prototype.reduce
        pre
          | Observable.of(1, 2, 3).reduce((prev, curr) => {
          |   return prev + curr;
          | }).subscribe(result => {
          |   console.log(result);
          | });
        pre
          | // → 6
      article.build
        h2 Observable.prototype.concat
        pre
          | Observable.of(1, 2, 3).concat(
          |   Observable.of(4, 5, 6),
          |   Observable.of(7, 8, 9)
          | ).subscribe(result => {
          |   console.log(result);
          | });
        pre
          | // → 1 → 2 → 3 → 4 → 5 → 6 → 7 → 8 → 9
      article.build
        h1 Promise
        h2 Extensions
      article
        h2 try / attempt
        ul.build
          li Converts function to promise
          li and sync errors to async
      article.build
        h2 current
        pre
          | promise = new Promise((resolve, reject) => {
          |   throw new Error('i failed');
          | });
          | promise.catch(console.log); // → i failed
      article.build
        h2 Promise.try
        pre
          | promise = Promise.try(() => {
          |   throw new Error('i failed');
          | });
          | promise.catch(console.log); // → i failed
        pre
          | promise = Promise.try(() => {
          |   return 'result';
          | });
          | promise.then(console.log);  // → result
      article
        h2 Promise.all
        h3 (ES 2015)
        ul.build
          li returns all results as array
          li short-circuits on reject
      article
        h2 Promise.race
        h3 (ES 2015)
        ul.build
          li resolves first settled promise
          li rejects if first settled promise rejects
      article
        h2 Promise.any
        ul.build
          li rejects when no promise resolves
          li short-circuits on resolve
      article
        h2 Promise.allSettled
        ul.build
          li returns all results as array
          li does not short circuit
      article.section
        h2 Stage 2 (Draft)
      article
        h1 Decorators
      article.build
        h1 Temporal
        h2 (like native MomentJS)
      article.build
        h2 Classes
        pre
          | Instant        // Point in time
        pre
          | OffsetDateTime // Offset from UTC (+01:00)
        pre
          | CivilDateTime  // Offset from Calendar
        pre
          | ZonedDateTime  // Offset + Timezone (Europe/Rome)
      article.build
        h1 (Weak)Set
        h2 Extensions
      article
        h2 Array-like
        ul.build
          li filter
          li map
          li find
          li reduce
          li join
          li ...
      article
        h2 Manipulating
        ul.build
          li addAll(... elements)
          li deleteAll(... elements)
          li intersection
          li union
          li difference
          li ...
      article
        h2 Comparing
        ul.build
          li isSubsetOf
          li isDisjointFrom
          li isSupersetOf
      article.build
        h1 (Weak)Map
        h2 Extensions
      article
        h2 Array-like
        ul.build
          li of / from
          li filter
          li mapKeys / mapValues
          li reduce
          li join
          li ...
      article
        h2 Manipulating
        ul.build
          li deleteAll
          li merge
          li update
      article
        h2 Aggregation
        ul.build
          li groupBy
          li keyBy
      article.build
        h1 throw
        h2 in expression contexts
      article.build
        h2 Parameter initializers
        pre
          | function save(filename =
          |   throw new TypeError('Argument required')
          | ) {}
      article.build
        h2 Arrow function bodies
        pre
          | lint(ast, {
          |   with: () => throw new Error(
          |     "avoid using 'with' statements.
          |   ")
          | });
      article.build
        h2 Conditional expressions
        pre
          | const obj = str
          |   ? JSON.parse(str)
          |   : throw new Error('String required')
          | ;
      article.build
        h2 Logical operations
        pre
          | class Product {
          |   get id() { return this._id; }
          |   set id(value) {
          |     this._id = value ||
          |       throw new Error("Invalid value")
          |     ;
          |   }
          | }
      article.build
        h2 Function implementation hiding
        pre
          | Function.prototype.toString
        pre
          | Error.prototype.stack
        pre
          | function foo() {
          |   "hide implementation";
          |   // ...
          | }
      article
        h1 Realms
      article
        h2 Intuitions
        ul.build
          li sandbox
          li iframe without DOM
          li principled version of Node's 'vm' module
          li sync worker
      article
        h2 Use cases
        ul.build
          li security isolation
          li plugins
          li in browser code editors
          li server-side rendering
          li testing
      article.build
        h2 Example
        pre
          | let g = window; // outer global
          | let r = new Realm(); // root realm
          |
          | let f = r.evaluate("(function() { return 17 })");
          |
          | f() === 17 // true
          | Error.prototype.stack
      article.build
        h1 String
        h2 Extensions
      article.build
        h2 String.replaceAll
        pre
          | const query = 'q=query+string+parameters';
        pre
          | const withSpaces = query.replace(/\+/g, ' ');
        pre
          | const withSpaces = query.replaceAll('+', ' ');
      article.build
        h1 Optional
        h2 Chaining
      article.build
        h2 Current
        pre
          | var query = 'input[name=foo]';
          | var $input = $form.querySelector(query)
          | var value = $input ? $input.value : undefined
      article.build
        h2 With optional chaining
        pre
          | var fooValue = $form.querySelector(query)?.value
        pre
          | var street = user?.address?.street
        pre
          | iterator.return?.() // manually close an iterator
      article.build
        h1 Nullish
        h2 Coalescing
      article.build
        h2 current
        pre
          | const undefinedValue =
          |   response.settings?.undefinedValue
          |   || 'some other default'
          | ; // result: 'some other default'
        pre
          | const nullValue =
          |   response.settings?.nullValue
          |   || 'some other default'
          | ; // result: 'some other default'
      article.build
        h2 current problems
        pre
          | response.settings?.showSplashScreen || true
        pre
          | // False evaluates to false, result: true
        pre
          | response.settings?.animationDuration || 300;
        pre
          | // 0 evaluates to false, result: 300
        pre
          | response.settings?.headerText || 'Hello, world!'
        pre
          | // '' evaluates to false, result: 'Hello, world!'
      article.build
        h2 Nullish Coalescing
        pre
          | response.settings?.showSplashScreen ?? true
        pre
          | response.settings?.animationDuration ?? 300;
        pre
          | response.settings?.headerText ?? 'Hello, world!'
      article.section
        h2 Stage 3 (Candidate)
      article.build
        h1 Numeric
        h2 Separators
      article.build
        h2 current
        pre
          | 1000000000
          | 101475938.38
          | // Is this a billion? a hundred millions? Ten millions?
        pre
          | let fee = 12300;
          | // is this 12,300? Or 123, because it's in cents?
        pre
          | let amount = 1234500;
          | // is this 1,234,500? Or cents, hence 12,345?
          | // Or financial, 4-fixed 123.45?
      article.build
        h2 Numeric Separators
        pre
          | 1_000_000_000           // Ah, so a billion
          | 101_475_938.38          // hundreds of millions
        pre
          | let fee = 123_00;       // $123 (12300 cents)
          | let fee = 12_300;       // $12,300 (thats much)
        pre
          | let amount = 12345_00;  // 12,345 (1234500 cents)
          | let amount = 123_4500;  // 123.45 (4-fixed fin.)
          | let amount = 1_234_500; // 1,234,500
      article.build
        h2 Numeric Separators
        pre
          | 0.000_001 // fractions
        pre
          | 1e10_000  // exponents
        pre
          | let nibbles = 0b1010_0001_1000_0101; // binary
        pre
          | let brandColor = 0x44_BB_44; // hex (colors)
      article.build
        h1 Class
        h2 Extensions
        ul.build
          li static
          li public
          li async
          li private
      article.build
        h2 private
        h3 in classes or objects
        pre
          | class ColorFinder {
          |   static #red = "#ff0000";
          |   static #blue = "#00ff00";
          |   static #green = "#0000ff";
      article
        pre
          | class ColorFinder {
          |   static #red = "#ff0000";
          |   static #blue = "#00ff00";
          |   static #green = "#0000ff";
          |   static colorName(name) {
          |     switch (name) {
          |       case "red": return ColorFinder.#red;
          |       case "blue": return ColorFinder.#blue;
          |       case "green": return ColorFinder.#green;
          |       default: throw new RangeError("unknown color");
          |     }
          |   }
          | }
      article.section
        h2 Stage 4 (Shipping)
      article.build
        h2 Optional catch binding
        pre
          | try { ... } catch (unused) { ... }
        pre
          | try { ... } catch { ... }
      article.build
        h1 Intl
        h2 Internationalization aka I18l
      article
        h2 Langauge dependent formatting for
        ul.build
          li Dates / Times
          li Numbers
          li Plural Rules
          li Collator (comparing)
      article.build
        h2 Intl.DateTimeFormat
        pre
          | const DateFormat = Intl.DateTimeFormat;
        pre
          | new DateFormat('en-US').format(date);
          | // → '12/20/2019'
        pre
          | new DateFormat('en-GB').format(date);
          | // → '20/12/2019'
        pre
          | // Include a fallback language
          | new DateFormat(['foo', 'de']).format(date)
          | // → '20.12.2019'
      article.build
        h2 Intl.NumberFormat
        pre
          | new Intl.NumberFormat('de-DE', {
          |   style: 'currency', currency: 'EUR'
          | }).format(number); // → '123.456,79 €'
        pre
          | // the Japanese yen doesn't use a minor unit
          | new Intl.NumberFormat('ja-JP', {
          |   style: 'currency', currency: 'JPY'
          | }).format(number); // → '￥123,457'
        pre
          | new Intl.NumberFormat('en-IN', {
          |   maximumSignificantDigits: 3
          | }).format(number); // → '1,23,000'
      article.build
        h2 Intl.PluralRules
        pre
          | new Intl.PluralRules('en-US').select(0);
          | // → 'other'
        pre
          | new Intl.PluralRules('en-US').select(1);
          | // → 'one'
        pre
          | new Intl.PluralRules('en-US').select(2);
          | // → 'other'
      article.build
        h2 Intl.Collator
        pre
          | function letterSort(lang, letters) {
          |   letters.sort(new Intl.Collator(lang).compare);
          |   return letters;
          | }
        pre
          | console.log(letterSort('de', ['a','z','ä']));
          | // expected output: Array ["a", "ä", "z"]
        pre
          | console.log(letterSort('sv', ['a','z','ä']));
          | // expected output: Array ["a", "z", "ä"]

      article.build
        h1 Array
        h2 Extensions
      article.build
        h2 Array.prototype.flat
        pre
          | const array = [1, [2, [3, [4]]]];
        pre
          | array.flat();         // → [1, 2, [3, [4]]];
        pre
          | array.flat(2);        // → [1, 2, 3, [4]];
        pre
          | array.flat(Infinity); // → [1, 2, 3, 4];
      article.build
        h2 Array.prototype.flatMap
        pre
          | const dup = (x) => [x, x];
        pre
          | [3, 4].map(dup);        // → [[3, 3], [4, 4]]
        pre
          | [3, 4].map(dup).flat(); // 🐌 → [3, 3, 4, 4]
        pre
          | [3, 4].flatMap(dup);    // 🚀 → [3, 3, 4, 4]
      article.build
        h1 Object
        h2 Extensions
      article.build
        h2 Object.prototype.entities
        pre
          | const object = { x: 42, y: 50 };
          | const entries = Object.entries(object);
          | // → [['x', 42], ['y', 50]]
        h2 <br/>Object.prototype.fromEntities
        pre
          | const result = Object.fromEntries(entries);
          | // → { x: 42, y: 50 }
      article.image(data-src="node_modules/lets-talk-about--template/assets/memes/all-the-things.jpg")
        h1 &nbsp;
        h1 Thats it
      article
        h2 Whats next?
        ul.build
          li
            a(href="https://v8.dev/features")
              | List of features added lately to v8
          li
            a(href="https://github.com/tc39/proposals")
              | List of proposals
          li
            a(href="https://babeljs.io/repl/")
              | Babel Playground
          li
            a(href="https://www.typescriptlang.org/play/")
              | TypeScript Playground
          li
            a(href="https://codepen.io/")
              | CodePen

      article.section
        h1 Questions?

    script(src='node_modules/lets-talk-about--template/main.js')
